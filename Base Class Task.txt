package com.Base_Class;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.Alert;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.Select;

public class Base_Class {

	public static WebDriver driver;

	public static WebDriver getBrowser(String browser) {

		if (browser.equalsIgnoreCase("chrome")) {
			System.setProperty("webdriver.chrome.driver",
					System.getProperty("user.dir") + "\\Driver\\chromedriver.exe");

			driver = new ChromeDriver();
		} else if (browser.equalsIgnoreCase("firefox")) {

			System.setProperty("webdriver.gecko.driver",
					System.getProperty("user.dir") + "\\Driver\\geckodriver.exe");
			driver = new FirefoxDriver();
		}
		driver.manage().window().maximize();

		return driver;
	}

	public static void geturl(String url) {

		driver.get(url);
	}

	public static void closePage() {
		driver.close();
	}

	public static void quitPage() {
		driver.quit();
	}

	public static void navigateTo(String element) {
		driver.navigate().to(element);
	}

	public static void navigateBack() {
		driver.navigate().back();
	}

	public static void navigateForward() {
		driver.navigate().forward();
	}

	public static void navigateRefresh() {
		driver.navigate().refresh();
	}

	public static void getTitle() {
		driver.getTitle();
	}

	public static void currentUrl() {
		driver.getCurrentUrl();
	}
	
	public static void switchTo() {
         driver.switchTo();
	}

	public static void getText(WebElement element) {
		String text = element.getText();
		System.out.println(text);
	}

	public static void getAttribute(WebElement element, String name) {
		String attribute = element.getAttribute(name);
		System.out.println(attribute);
	}

	public static void isEnabled(WebElement element) {

		boolean enabled = element.isEnabled();
		System.out.println(enabled);
	}

	public static void isDisplayed(WebElement element) {

		boolean displayed = element.isDisplayed();
		System.out.println(displayed);
	}

	public static void isSelected(WebElement element) {

		boolean selected = element.isSelected();
		System.out.println(selected);
	}

	public static void inputKeys(WebElement element, String value) {

		element.sendKeys(value);
	}

	public static void clickElement(WebElement element) {

		element.click();
	}

	public static void clear(WebElement element) {
		element.clear();
	}
	
	public static void dropDown(WebElement element, String s, String s1) {
         Select sel = new Select(element);
         
         if (s.equalsIgnoreCase("value")) {
			sel.selectByValue(s1);
		}
         else if (s.equalsIgnoreCase("visibletext")) {
			sel.selectByVisibleText(s1);
		}
         else if (s.equalsIgnoreCase("index")) {
			sel.selectByIndex(Integer.parseInt(s1));
		}
	}
	
	public static void multipleDropdown(WebElement element, String s) {
          
		Select sel = new Select(element);
		if (s.equalsIgnoreCase("multiple")) {
			
			boolean multiple = sel.isMultiple();
			System.out.println(multiple);
		}
		else if (s.equalsIgnoreCase("first selected")) {
			
			WebElement firstSelectedOption = sel.getFirstSelectedOption();
			System.out.println(firstSelectedOption);
		}
		else if (s.equalsIgnoreCase("all option")) {
			List<WebElement> allOptions = sel.getAllSelectedOptions();
			for (WebElement all : allOptions) {
				System.out.println(all);
			}
		}
		else if (s.equalsIgnoreCase("get option")) {
			List<WebElement> options = sel.getOptions();
			for (WebElement option : options) {
				System.out.println(option);
			}
		}
		
	}

	public static void alert(String s,String s1) {
		
		Alert a = driver.switchTo().alert();
		if (s.equalsIgnoreCase("accept")) {
		
			a.accept();
		}
		else if (s.equalsIgnoreCase("dismiss")) {
			a.dismiss();
		}
		else if (s.equalsIgnoreCase("sendkeys")) {
			
			a.sendKeys(s1);
		}
              
	}
	
	public static void actions(WebElement element, String s) {
		Actions act = new Actions(driver);
		
		if (s.equalsIgnoreCase("click")) {
			
			act.click(element).build().perform();
		}
		else if (s.equalsIgnoreCase("right click")) {
			
			act.contextClick(element).build().perform();
		}
		else if (s.equalsIgnoreCase("drag and drop")) {
			act.dragAndDrop(element, element).build().perform();
		}
		else if (s.equalsIgnoreCase("double click")) {
			act.doubleClick(element).build().perform();
		}
		else if (s.equalsIgnoreCase("move to element")) {
			act.moveToElement(element).build().perform();
		}	
	}
	
	public static void down() throws AWTException {
             Robot r = new Robot();
             
             r.keyPress(KeyEvent.VK_DOWN);
             r.keyRelease(KeyEvent.VK_DOWN);
	}
	
	public static void enter() throws AWTException {
		 Robot r = new Robot();
		 
		 r.keyPress(KeyEvent.VK_ENTER);
		 r.keyRelease(KeyEvent.VK_ENTER);
	}
	
	public static void frame(WebElement element) {
            
		driver.switchTo().frame(element);
	}
	public static void frames(int i, String s, String s1) {
		
		if (s.equalsIgnoreCase("index")) {
			driver.switchTo().frame(i);
		}
		else if (s.equalsIgnoreCase("id")) {
		
			driver.switchTo().frame(s1);
		}
	}
	
	public static void exitFrame(String s) {
           
		if (s.equalsIgnoreCase("default")) {
		
			driver.switchTo().defaultContent();
		}
		else if (s.equalsIgnoreCase("parent")) {
			driver.switchTo().parentFrame();
		}
	}
	
	public static void implicitWait(long l) {
       driver.manage().timeouts().implicitlyWait(l, TimeUnit.SECONDS);
	}
	
	public static void sleep(long l) throws InterruptedException {
       
		Thread.sleep(l);
	}
	
	public static void takescreenshot(String value) throws Throwable {
		TakesScreenshot ts = (TakesScreenshot) driver;
		File src = ts.getScreenshotAs(OutputType.FILE);
		File des = new File(value);
		FileUtils.copyFile(src, des);

	}

}
